the owner.passport relation should be one to one, so that there is no
passport class, only an owner.passport attribute.

you managed to store pdf for owner. make sure director gets the same
treatment, and then deal with curl.


this is supposed to be code for storing pdf to datastore (not
blobstore):

  pdf = StringIO.StringIO()

        doc = SimpleDocTemplate(pdf, pagesize=letter)
        doc.build(story)

        content = pdf.getvalue()

        blob = model.PdfTable()
        blob.archivoBlob = db.Blob(content)
        blob.put()


perhaps make directors clickable, to view passports?


make a separate owner,director,passport page, apart from edit.


may be problem adding owner.company = company

      <a href="/passport/{{ company.key().id() }}">View Passport Scan</a>
    <p>
      <img src="passport?key={{ company.key() }}" alt="passport scan"></img>
    <p>



why does the name and city disappear when you push the upload button?
because you are taken to the edited page, somehow, i guess.

neven mind about adding more than one owner in the client. this can be
done with the curl syntax.


in edit, have a button for adding more owners (and directors). have a
button for each of them to upload a passport.


one passport for each owner or director. passport is an attribute of
the owner, not the company.

so, you upload a passport for a director, and then attach the director
to the company. the passport is accessed by company.owner[0].passport
or something.



you need to have something that appends new owners, passports and
directors to the lists of those. they are their own classes.

det kan se ut som om du nå har klart å lagre (men ikke displaye) pdf'en.

look at this: it may show you how to store pdfs. remember, you don't
need to display them, only get them through curl.
http://stackoverflow.com/questions/9550716/how-to-save-generated-pdf-with-reportlab-to-datastore-in-app-engine-python

i can't use api images, because it's a pdf, which does not count as an image.

you need more than one pdf per company, but you don't need to display
them, you only need to be able to download them through curl.

the code you want is probably in 'displaying stored images' in the
last tab in your browser. you are working on displaying the image you
uploaded (the passport scan). remember, you want it to be pdf, so you
want the content type header to read image/pdf, not jpeg, or png.


the file will be stored in "file" in post, and you can add it to
company.file, which will be a blob, i guess.

test passport with some image. it must be displayed in the company view.




in the company view, let there be one button for attaching a pdf-file.

in the companies view, let there be a button for adding a
company. this is where the 'required' mechanism must be.






you have added companies.html. give it a handler, and let that be the
response to /company url. make the companies clickable.

the handler must have a post method, that returns/displays the companies.



Company ID
Name
Address
City
Country
E-mail (not required)
Phone Number (not required)
One or more directors and beneficial owners.





display only a welcome messsage on index.
next step, make /companies, which lists all the compaines, clickable.
then, each compay, with details, after click.

drop the authentication. it messes with the api access, i would think.


you need to be able to attach a file to each owner/director. this file
is a scan of their passport. must be able to export as pdf. no, attach
as pdf, not export. associate the owner with a pdf file.



what is rest? ignore. just the http request paradigm.



look up curl
curl post example:

curl --data "param1=value1&param2=value2" http://example.com/resource.cgi
or
curl --form "fileupload=@filename.txt" http://example.com/resource.cgi

in recent versions: --data-urlencode (no dash)

what does curl -i do? it includes the header, so that you can send the
stuff back to the one who sent you the curl -i request. i think.


look up heroku. appengine is used instead. heroku just pushes an app
to the cloud, exactly the same as appengine does.

the data needs to be outputted in json? no, just use rest.


the big thing here is this: find out how to get the service to add,
remove, edit through the address-based api. you need to give it a
post, with a string, i guess?

the http post can be delivered a a string, or as a multipart
expression or form data.


sample post message:

POST /path/script.cgi HTTP/1.0
From: frog@jmarshall.com
User-Agent: HTTPTool/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 32

home=Cosby&favorite+flavor=flies


important: the use for the api is by another program, not manual
command line stuff. so, you just define the string or format that
needs to be used, and the guy at the other end decides how to send you
this data, whether through a program or by typing it in manually. so,
you define a url to connect to, and what the post request should look
like. that's it.



the api is what, text based, not gui. based on urls, i guess. they
mention less. perhaps use that to read the output?


the javascript client is not done. use the gui you have made with
python.


for authentication, i use login with google, since that is a good,
simple, safe default for webapps. for inhouse apps, a different
method, would be used, based on the client's own authentication
system.

redundancy: two or more servers, with wake-up on shutdown. you don't
need to do it, just describe it, naming the python technologies you
would use.


look into how to version control the data in the db. this will be very
useful for your own project as well!
