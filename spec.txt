have a page that displays owner names, and let the user upload pdf
from there.

      <a href="/attach/{{ owner_name }}">Upload passport</a>


	<input type="hidden" name="company_id" value="{{ company.key().id() }}">



you need to have the upload passport button/link in edit, not attached
to a user. the users must be listed in attach.html, and chosen, maybe
with radio buttons?

if you press the attach passport link before you press the done
editing button, the owner will not be stored.

can you use his name instead? i think so.

you want to send the owner id to attach.html, so that it knows which
owner to attach to. however, in the owners.html, you are adding a new
owner, so he has not been stored yet (this happens in edited, in
main), and you don't have his id.




let the attach link in owners.html take you to /attach/[owner id], where you can
upload the file.


you need to be able to attach pdf to an already existing owner.

so you need to add owners and directors separate to attaching pdfs.

try adding the owners and directors in the edit view? no, make an
additional button or link to attach pdfs to them.




locally:
når man fyller i alle feltene funker det perfekt.
når man unnlater ett required så:
-i klienten får man beskjed om det.
-i curl får man ikke beskjed, og den man unnlater mangler
simpelthen. ellers alt vel. dvs. at man kan unnlate å fylle inn
required felter gjennom curl.

online:
fyll i alle feltene: alt vel.
-unnlat ett required: får beskjed.

-unnlat email eller phone: fail fordi ingen verdi til
self.request.get. må altså ha: if phone, if email. alle, ikke bare de
to, siden curl kan unnlate å fylle i required.


addhandler is redundant.

online, only name and city is stored, even if you include more
attributes. not even when you include all the attributes. hm. have you
updated the online version?

only name and city are stored when using curl to add company. why?
because if you don't include all the attributes, (email and phone
number as well), it fails (silently online, storing only what you
included - with error message locally, without storing anything.




save the candies.

-d, --data-binary and --data-urlencode to post data with curl. @ for
 file to read from (NOT upload?). yes, use --data-binary with @ and
 filename for
 file upload.

-X means request, so -X POST or -X GET. not really needed?



address, country, etc. are not stored when you add a new company
online and locally. add
these attributes somewhere!

btw, add the pdf functionality for directors as well. now, it's only owners.

you have curl for displaying companies and company. make it for
editing company, adding company and for attaching pdfs to owners and directors.


hva med å bare gjøre 

self.response.write(pdf) i ownerhandler? det er kanskje det riktigste.


they're telling me the src needs to be a pointer, not the actual
content.


  <embed src="{{ p }}" width="500"
	 height="375" type="application/pdf" alt="Passport scan">



      <a href="YourFile.pdf">shree</a> 


      <td CLASS="TextObject">
	<p>
	  <iframe title="PDF in an i-Frame" src="{{ owner.passport }}"
		  height="500" width="400" >
	  </iframe>bobba</p>
      </td>

owner.passport is now containing what it should, but i can't display
it. ascii encoding problem in owner.html.

when i define content-type in ownerhandler, it understands that it's
supposed to show a pdf, but that does not make the encoding problem go away.


perhaps defining its content-type in ownerhandler before sending it to owner.html will
do the trick?

now, p contains something that is not ascii text. good news, but
unicode madness coming up!



now, the contents of owner.passport is None, not the title, like it
used to be. silent fail!



now, this probably has your answer:
http://stackoverflow.com/questions/2935918/app-engine-save-response-from-an-api-in-the-data-store-as-file-blob


you are indeed only storing the title of the pdf, as confirmed by
sizes. why?

this is supposed to be code for storing pdf to datastore (not
blobstore):


stringio
simpledoctemplate
story
getvalue
model.pdftable
archivoblob (probably archiveblob)


  pdf = StringIO.StringIO()

        doc = SimpleDocTemplate(pdf, pagesize=letter)  #A4)
        doc.build(story)

        content = pdf.getvalue()

        blob = model.PdfTable()
        blob.archiveBlob = db.Blob(content)
        blob.put()

-------------------------

#this generates the pdf:
pdf = StringIO()

doc = SimpleDocTemplate(pdf, pagesize=letter)
doc.build(story) 

#this gets the content of generated pdf
content = pdf.getvalue()

#this saves the content to db
pdfStorage = PdfStorage(pdfContent = content);   # class from models. pdfcontent is a blobproperty
pdfStorage.put()

#output to browser 
handler.response.write(content)





the src for the pdf needs to be a key, so the passport must be it's
own object after all. referenceproperty.

if you use object tag instead of embed tag, you can use data instead
of src, which seems to be able to handle things like
{{owner.passport}}

<OBJECT data="YourFile.pdf" TYPE="application/x-pdf" TITLE="SamplePdf" 
WIDTH=200 HEIGHT=100>
    <a href="YourFile.pdf">shree</a> 
</object>


seems only the pdf title is stored, not the pdf content.


db is empty. need to put some companies in. do it in main.



deploy to appengine (version 2) let them know it will be up for about
a week.

check that curl works towards the online version. especially that you
can get at the pdfs.

ORIENTATION:
'curl -i transfarmr.dictatr.com/companies' yields a list, formatted as
html, of the companies in the db. from this list, you can glean the
company id of each company.

'curl -i transfarmr.dictatr.com/company/[company_id]' yields the
details of one company.

'curl -i transfarmr.dictatr.com/edit ... hm.

to show the pdf, i guess i'll make the owners clickable, and have that
show the pdf.



remove the home link in company view.

add the rest of the attributes in add and edit and view, not just name and city.





the owner.passport relation should be one to one, so that there is no
passport class, only an owner.passport attribute.

you managed to store pdf for owner. make sure director gets the same
treatment, and then deal with curl.




perhaps make directors clickable, to view passports?


make a separate owner,director,passport page, apart from edit.


may be problem adding owner.company = company

      <a href="/passport/{{ company.key().id() }}">View Passport Scan</a>
    <p>
      <img src="passport?key={{ company.key() }}" alt="passport scan"></img>
    <p>



why does the name and city disappear when you push the upload button?
because you are taken to the edited page, somehow, i guess.

neven mind about adding more than one owner in the client. this can be
done with the curl syntax.


in edit, have a button for adding more owners (and directors). have a
button for each of them to upload a passport.


one passport for each owner or director. passport is an attribute of
the owner, not the company.

so, you upload a passport for a director, and then attach the director
to the company. the passport is accessed by company.owner[0].passport
or something.



you need to have something that appends new owners, passports and
directors to the lists of those. they are their own classes.

det kan se ut som om du nå har klart å lagre (men ikke displaye) pdf'en.

look at this: it may show you how to store pdfs. remember, you don't
need to display them, only get them through curl.
http://stackoverflow.com/questions/9550716/how-to-save-generated-pdf-with-reportlab-to-datastore-in-app-engine-python

i can't use api images, because it's a pdf, which does not count as an image.

you need more than one pdf per company, but you don't need to display
them, you only need to be able to download them through curl.

the code you want is probably in 'displaying stored images' in the
last tab in your browser. you are working on displaying the image you
uploaded (the passport scan). remember, you want it to be pdf, so you
want the content type header to read image/pdf, not jpeg, or png.


the file will be stored in "file" in post, and you can add it to
company.file, which will be a blob, i guess.

test passport with some image. it must be displayed in the company view.




in the company view, let there be one button for attaching a pdf-file.

in the companies view, let there be a button for adding a
company. this is where the 'required' mechanism must be.






you have added companies.html. give it a handler, and let that be the
response to /company url. make the companies clickable.

the handler must have a post method, that returns/displays the companies.



Company ID
Name
Address
City
Country
E-mail (not required)
Phone Number (not required)
One or more directors and beneficial owners.





display only a welcome messsage on index.
next step, make /companies, which lists all the compaines, clickable.
then, each compay, with details, after click.

drop the authentication. it messes with the api access, i would think.


you need to be able to attach a file to each owner/director. this file
is a scan of their passport. must be able to export as pdf. no, attach
as pdf, not export. associate the owner with a pdf file.



what is rest? ignore. just the http request paradigm.



look up curl
curl post example:

curl --data "param1=value1&param2=value2" http://example.com/resource.cgi
or
curl --form "fileupload=@filename.txt" http://example.com/resource.cgi

in recent versions: --data-urlencode (no dash)

what does curl -i do? it includes the header, so that you can send the
stuff back to the one who sent you the curl -i request. i think.


look up heroku. appengine is used instead. heroku just pushes an app
to the cloud, exactly the same as appengine does.

the data needs to be outputted in json? no, just use rest.


the big thing here is this: find out how to get the service to add,
remove, edit through the address-based api. you need to give it a
post, with a string, i guess?

the http post can be delivered a a string, or as a multipart
expression or form data.


sample post message:

POST /path/script.cgi HTTP/1.0
From: frog@jmarshall.com
User-Agent: HTTPTool/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 32

home=Cosby&favorite+flavor=flies


important: the use for the api is by another program, not manual
command line stuff. so, you just define the string or format that
needs to be used, and the guy at the other end decides how to send you
this data, whether through a program or by typing it in manually. so,
you define a url to connect to, and what the post request should look
like. that's it.



the api is what, text based, not gui. based on urls, i guess. they
mention less. perhaps use that to read the output?


the javascript client is not done. use the gui you have made with
python.


for authentication, i use login with google, since that is a good,
simple, safe default for webapps. for inhouse apps, a different
method, would be used, based on the client's own authentication
system.

redundancy: two or more servers, with wake-up on shutdown. you don't
need to do it, just describe it, naming the python technologies you
would use.


look into how to version control the data in the db. this will be very
useful for your own project as well!
